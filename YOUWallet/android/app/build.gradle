apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
        entryFile              : "index.js",
        bundleInStaging        : true,//should bundle in staging
        bundleInRelease        : true,//should bundle in release
        bundleInQarelease0     : true,//should bundle
        bundleInQarelease1     : true,//should bundle

        devDisabledInStaging   : true,
        devDisabledInRelease   : true,
        devDisabledInQaRelease0: true,
        devDisabledInQaRelease1: true,

        nodeExecutableAndArgs  : ["/usr/local/bin/node"],
]

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'

    signingConfigs {
        release {
            storeFile file("uwallet.jks")
            storePassword "youchain"
            keyAlias "youchain"
            keyPassword "youchain"
        }
    }

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        applicationId "im.uchain.wallet"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 191217
        versionName "1.0.2"

        multiDexEnabled true

        renderscriptTargetApi 23
        renderscriptSupportModeEnabled true

        ndk {
            abiFilters "armeabi-v7a", "x86"
        }

        buildConfigField "String", "APP_CHANNEL", '"official"'
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        debug {
            debuggable true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
        staging {
            useProguard true
            crunchPngs false
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            matchingFallbacks = ['debug', 'release']
        }
        release {
            useProguard true
            crunchPngs false
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }

            def project = "YouChainWallet"
            def SEP = "_"
            def buildType = variant.variantData.variantConfiguration.buildType.name
            def version = variant.versionName
            def code = variant.versionCode;
            def date = new Date();
            def formattedDate = date.format('yyMMdd_HHmm')

            //only staging and release, change name
            if (buildType.equals('staging') || buildType.equals('release')) {
                def newApkName = project + SEP + buildType + SEP + version + SEP + code + SEP + formattedDate + ".apk"
                output.outputFileName = newApkName
            } else {
                def newApkName = project + SEP + buildType + SEP + version + SEP + code + SEP + formattedDate + ".apk"
                output.outputFileName = newApkName
            }
        }
    }

    project.afterEvaluate {
        project.android.applicationVariants.all { variant ->
            variant.outputs.each { output ->
                output.processResources.doFirst { pm->
                    String manifestPath = output.processResources.manifestFile;
                    def manifestContent = file(manifestPath).getText()
                    manifestContent = manifestContent.replace('<uses-permission android:name="android.permission.RECEIVE_SMS"/>', '')
                    manifestContent = manifestContent.replace('<uses-permission android:name="android.permission.READ_CALL_LOG"/>', '')
                    file(manifestPath).write(manifestContent)
                }
            }
        }
    }

    repositories {
        flatDir {
            dirs 'libs'
            dirs '../rnlibs/libs'
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    configurations.all {
        resolutionStrategy {
            force 'com.airbnb.android:lottie:2.5.5', 'org.webkit:android-jsc:r241213'
        }
    }

    packagingOptions {
    }

}

apply from: "../../node_modules/react-native/react.gradle"

dependencies {
    compile project(':rnlibs')

    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.android.support:appcompat-v7:26.1.0"
    implementation "com.facebook.react:react-native:+"  // From node_modules

    implementation 'com.android.support:multidex:1.0.1'

    compile(name: 'svprogresshud-release-1.0.4', ext: 'aar')

    implementation 'com.google.code.gson:gson:2.2.4'

}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
